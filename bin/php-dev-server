#!/usr/bin/env php
<?php

use C3\PhpDevServer\ConfigManager;
use C3\PhpDevServer\WebserverInstaller;

set_time_limit(0);

if (empty($_SERVER['HOME']) || !is_readable($_SERVER['HOME'])) {
    die('$HOME environment variable does not exist or path is not readable');
}

$autoloaderPath = determineComposerAutoloadPath();
require $autoloaderPath;

$composerJsonPath = dirname(dirname($autoloaderPath)) . '/composer.json';
$composerJson = file_get_contents($composerJsonPath);

if (!WebserverInstaller::isInstalled()) {
    WebserverInstaller::install();
}

$configManager = new ConfigManager($composerJson);

$workingDirectory = dirname($composerJsonPath);
$symfonyDirectory = $_SERVER['HOME'] . '/.symfony';
$symfonyBinary = $symfonyDirectory . '/bin/symfony';
$symfonyParams = [
    'server:start',
    '--port=' . $configManager->getPort(),
    '--dir=' . escapeshellarg($configManager->getWebDirectory()),
];

if (!$configManager->isTlsEnabled()) {
    $symfonyParams[] = '--no-tls';
}

if (null !== $configManager->getP12File()) {
    // Handle custom p12 file
    if (0 === strpos($configManager->getP12File(), '/')) {
        // Absolute path
        $file = new SplFileInfo($configManager->getP12File());
    } else {
        // Relative to $workingDirectory
        $file = new SplFileInfo($workingDirectory) . '/' . $configManager->getP12File();
    }

    if (!$file->isReadable()) {
        die('Could not read P12 file: ' . $file->getPath());
    }

    $currentP12File = $symfonyDirectory . '/certs/default.p12';
    if (!file_exists($currentP12File) || md5_file($file->getRealPath()) !== md5_file($currentP12File)) {
        // Replace original symfony/cli default.p12
        echo 'Copy ' . $file->getRealPath() . ' to ' . $currentP12File;
        copy($file->getRealPath(), $currentP12File);
    }
}

passthru('cd ' . escapeshellarg($workingDirectory) . ' && ' . escapeshellarg($symfonyBinary) . ' ' . implode(' ', $symfonyParams));

/**
 * @return SplFileInfo
 * @throws RuntimeException
 */
function determineComposerAutoloadPath()
{
    $dir = __DIR__;
    while (!empty($dir) && $dir !== '/') {
        if (is_readable($dir . '/autoload.php')) {
            return new SplFileInfo($dir . '/autoload.php');
        }
        if (is_readable($dir . '/vendor/autoload.php')) {
            return new SplFileInfo($dir . '/vendor/autoload.php');
        }
        $dir = dirname($dir);
    }

    throw new RuntimeException('autoload.php not found');
}
